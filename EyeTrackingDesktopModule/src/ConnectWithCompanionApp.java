import javax.swing.*;
import java.awt.*;

public class ConnectWithCompanionApp {
    public JPanel panel;
    public JLabel prompt;
    public JLabel ip_prompt;
    public JLabel port_prompt;
    private JLabel loading;

    public void setPortNo(int no) {
        port_prompt.setText("Port No: " + no);
    }

    public void setIPAddress(String add) {
        ip_prompt.setText("IP Address: " + add);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.setBackground(new Color(-16777216));
        prompt = new JLabel();
        prompt.setAlignmentY(0.5f);
        Font promptFont = this.$$$getFont$$$("Gadugi", Font.PLAIN, 20, prompt.getFont());
        if (promptFont != null) prompt.setFont(promptFont);
        prompt.setForeground(new Color(-1));
        prompt.setIcon(new ImageIcon(getClass().getResource("/assets/loading.gif")));
        prompt.setIconTextGap(15);
        prompt.setText("Waiting For Connection With The Companion App");
        panel.add(prompt, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ip_prompt = new JLabel();
        Font ip_promptFont = this.$$$getFont$$$("Source Code Pro", Font.PLAIN, 14, ip_prompt.getFont());
        if (ip_promptFont != null) ip_prompt.setFont(ip_promptFont);
        ip_prompt.setForeground(new Color(-1));
        ip_prompt.setText("IP Address: ");
        panel.add(ip_prompt, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        port_prompt = new JLabel();
        Font port_promptFont = this.$$$getFont$$$("Source Code Pro ExtraLight", Font.PLAIN, 14, port_prompt.getFont());
        if (port_promptFont != null) port_prompt.setFont(port_promptFont);
        port_prompt.setForeground(new Color(-1));
        port_prompt.setText("Port No:");
        panel.add(port_prompt, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loading = new JLabel();
        loading.setText("");
        panel.add(loading, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
